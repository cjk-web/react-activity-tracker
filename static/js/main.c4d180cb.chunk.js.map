{"version":3,"sources":["components/Stopwatch.js","App.js","index.js"],"names":["Stopwatch","props","state","time","timeStart","isOn","stopTimer","bind","this","setState","Date","now","setInterval","isRunning","seconds","Math","floor","slice","mins","hours","className","Component","App","activities","newActivityDescription","newActivityId","createNewActivity","timeNow","description","id","startTime","JSON","stringify","endTime","sessionStorage","setItem","alert","handleInputChange","e","target","value","retrieveStoredActivities","getItem","completeActivity","updatedActivities","parse","elapsedTime","start","end","console","log","map","activityList","key","Intl","DateTimeFormat","hour","minute","month","day","format","htmlFor","type","name","onChange","placeholder","onClick","activityCard","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c4d180cb.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Stopwatch extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = { \r\n            time: 0,\r\n            timeStart: 0,\r\n            isOn: false\r\n        }\r\n        this.stopTimer = this.stopTimer.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            isOn: true,\r\n            time: this.state.time,\r\n            timeStart: Date.now() - this.state.time\r\n          })\r\n          this.Stopwatch = setInterval(() => this.setState({\r\n            time: Date.now() - this.state.timeStart\r\n          }), 10);\r\n    }\r\n\r\n    stopTimer() {\r\n        this.setState({isRunning: false})\r\n    }\r\n\r\n    render() {\r\n        const { time } = this.state;\r\n        let seconds = (\"0\" + (Math.floor(time / 1000) % 60)).slice(-2);\r\n        let mins = (\"0\" + (Math.floor(time / 60000) % 60)).slice(-2);\r\n        let hours = (\"0\" + Math.floor(time / 3600000)).slice(-2);\r\n        return (\r\n            <div className=\"Stopwatch\">\r\n                {hours}:{mins}:{seconds}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Stopwatch;","import React, { Component } from 'react';\nimport './App.css';\nimport Stopwatch from './components/Stopwatch'\n\nclass App extends Component {\n  \n  state = {\n    activities: [],\n    newActivityDescription: '',\n    newActivityId: 0\n  }\n\n  createNewActivity = () => {\n    if (this.state.newActivityDescription) {\n      var timeNow = Date.now();\n      this.setState({ activities: [ ...this.state.activities, { description: this.state.newActivityDescription, id: this.state.newActivityId, startTime: JSON.stringify(timeNow), endTime: null } ] })\n\n      this.setState({ newActivityId: this.state.newActivityId + 1 })\n      this.setState({ newActivityDescription: '' })\n\n      sessionStorage.setItem('activities', JSON.stringify(this.state.activities))\n    }\n    else {\n      alert(\"Activity not added. Please add a description and try again\")\n    }\n  }\n\n  handleInputChange = (e) => {\n    this.setState({ newActivityDescription: e.target.value }, () => {\n    })\n  }\n\n  retrieveStoredActivities = () => {\n    var storage = sessionStorage.getItem('activities')\n  }\n\n  completeActivity = (id) => {\n    var updatedActivities = JSON.parse(JSON.stringify(this.state.activities))\n    updatedActivities[id].endTime = Date.now();\n    this.setState({activities: updatedActivities})\n  }\n\n  elapsedTime = (start, end) => {\n    var time = new Date(JSON.parse(end)) - new Date(JSON.parse(start))\n\n    var seconds = (\"0\" + (Math.floor(time / 1000) % 60)).slice(-2);\n    var mins = (\"0\" + (Math.floor(time / 60000) % 60)).slice(-2);\n    var hours = (\"0\" + Math.floor(time / 3600000)).slice(-2);\n\n    console.log(hours + ':' + mins + ':' + seconds)\n    return hours + ':' + mins + ':' + seconds\n  }\n\n  render() {\n\n    \n    return (\n      <div className=\"App\">\n        <header>\n          <div className=\"header-title\">Activity Tracker</div>\n        </header>\n        <div className=\"tracker-container\">\n          <div className=\"tracker-activity-spreadsheet\">\n            <h3 className=\"spreadsheet-title\">Tracked Activities</h3>\n            <div className=\"spreadsheet-data\">\n                <div className=\"spreadsheet-header spreadsheet-row\">\n                  <div className=\"header-cell spreadsheet-cell\">\n                    Description\n                  </div>\n                  <div className=\"header-cell spreadsheet-cell\">\n                    Started\n                  </div>\n                  <div className=\"header-cell spreadsheet-cell\">\n                    Completed\n                  </div>\n                  <div className=\"header-cell spreadsheet-cell\">\n                    Duration\n                  </div>\n                </div>\n                {this.state.activities.map((activityList) => (\n                  <div className=\"spreadsheet-row\" key={activityList.id}>\n                    <div className=\"spreadsheet-cell\">\n                      {activityList.description}\n                    </div>\n                    <div className=\"spreadsheet-cell\">\n                      {new Intl.DateTimeFormat('en-US', {\n                        hour: \"2-digit\",\n                        minute: \"2-digit\",\n                        month: \"2-digit\",\n                        day: \"2-digit\"\n                      }).format(new Date(JSON.parse(activityList.startTime)))}\n                    </div>\n                    <div className=\"spreadsheet-cell\">\n                      {activityList.endTime ? new Intl.DateTimeFormat('en-US', {\n                        hour: \"2-digit\",\n                        minute: \"2-digit\",\n                        month: \"2-digit\",\n                        day: \"2-digit\"\n                      }).format(new Date(JSON.parse(activityList.endTime))) : 'Ongoing'}\n                    </div>\n                    <div className=\"spreadsheet-cell\">\n                      {activityList.endTime ? <span>{this.elapsedTime(activityList.startTime, activityList.endTime)}</span> : <Stopwatch startTime={activityList.startTime} />}\n                    </div>\n                  </div>\n                ))}\n            </div>\n          </div>\n          <div className=\"tracker-punchclock\">\n            <div className=\"create-activity\">\n              <h3>Create A New Activity</h3>\n              <div className=\"input-group\">\n                <label htmlFor=\"new-activity-description\">Enter a Description</label>\n                <input type=\"text\" name=\"new-activity-description\" className=\"input-description\" value={this.state.newActivityDescription} onChange={this.handleInputChange} placeholder=\"Create A New Activity\" />\n              </div>\n              <button className=\"add-activity\" onClick={this.createNewActivity}>Start New Activity</button>\n            </div>\n            <div className=\"running-activities\">\n              <h3>Currently Running</h3>\n              <div className=\"card-grid\">\n                {this.state.activities.map((activityCard) => (\n                  <div className=\"activity-card\" key={activityCard.id}>\n                    <div className=\"description\">{activityCard.description}</div>\n                    <div className=\"duration\">Duration: {activityCard.endTime ? <span>{this.elapsedTime(activityCard.startTime, activityCard.endTime)}</span> : <Stopwatch startTime={activityCard.startTime} />} </div>\n                    <div className=\"actions\">\n                        <button className=\"end-timer\" onClick={ () => this.completeActivity(activityCard.id) }>End Activity Timer</button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}